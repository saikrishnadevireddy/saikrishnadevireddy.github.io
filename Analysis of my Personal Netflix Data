#Importing data from personal computer

import pandas as pd
df=pd.read_csv(r"Y:\DS\Case Studies\Netflix 1511\Content_Interaction\ViewingActivity.csv")
df.head()

#df.head() gives us insights of what our data looks like

df.shape()

#df.shape() gives us the information about number of rows and columns present in our data
#In my case, I have 664 rows and 10 columns. Meaning, 10 features and 664 entries in layman terms

#I'm analysing the time I spent on watching Breaking Bad on Netflix. So, I'm dropping not-so relevant features for my purpose.

df=df.drop(['Profile Name', 'Attributes', 'Supplemental Video Type', 'Device Type', 'Bookmark', 'Latest Bookmark','Country'],axis=1)

#I've dropped features like Profile Name, Attributes etc., in this case.
#Now, if we take a look at the shape of our dataframe. It has 664 rows and only 3 columns.

#Let's take a look at the data types of our columns.

df.dtypes

#We notice that all our columns are of 'object' datatype. But Start Time and Duration should be in datetime format.
#Lets convert these two columns into datetime format

df['Start Time']=pd.to_datetime(df['Start Time'], utc=True)

#I've mentioned utc=True because it helps us later to convert the time into different timezone
#Let's take a look at datatypes now

df.types

#Start Time is now of datetime64[ns, UTC] format
#We can use tz_convert() to convert dataframes to any timezone. But, tz_convert() can be used only on DatatimeIndex().
#So, I will set Start Time column as index using set_index() and then reset the index after the conversion

df=df.set_index('Start Time')
df.index=df.index.tz_convert('Asia/Calcutta')
df=df.reset_index()
df.head()

#Start Time column time format has been changed. We can notice that +5:30 is included to every value out there.
#Duration can easily be converted to timedelta using pd.to_timedelta()
#I'm converting duration to timedelta instead of timeframe because duration is a measure of length of time and timedelta is a duration that pandas can understand

#Let's create a dataframe to filter Breaking Bad from my data.

Breaking_Bad=df[df['Title'].str.contains('Breaking Bad', regex=False)]

#regex is of boolean data type, which takes True as default.
#regex, if True assumes that str passed is a regular expression. If False, treats str passed as a literal string

Breaking_Bad.shape

#My Breaking_Bad dataframe has only 51 rows as of now. Because I haven't finished watching it ;)

#I'm filtering out the views where the duration of the watch is more than a minute.

Breaking_Bad=Breaking_Bad[Breaking_Bad['Duration']> '0 days 00:01:00']

#I will take a look at the shape, once again

Breaking_Bad.shape

#This time I have only 43 rows, meaning I have 8 rows of data where the duration is less than a minute

Breaking_Bad['Duration'].sum()

#I've spent 22:16:38 watching Breaking Bad. That's almost a day

# Let's analyse on which days and during what hours during the week I've watched the Breaking_Bad
# This can be achieved by dt.weekday and dt.hour

Breaking_Bad['weekday']=Breaking_Bad['Start Time'].dt.weekday
Breaking_Bad['hour']=Breaking_Bad['Start Time'].dt.hour
Breaking_Bad.head()

#It's time for visual analysis

%matplotlib inline
import matplotlib

#pd.Categorical() by default plots the days in descending order based on the number of episodes watched on each day.
#But it will be visually intuitive to plot them in Monday-Sunday order

Breaking_Bad['weekday']=pd.Categorical(Breaking_Bad['weekday'], categories=[0,1,2,3,4,5,6], ordered=True)
Breaking_Bad_by_day=Breaking_Bad['weekday'].value_counts()
Breaking_Bad_by_day=Breaking_Bad_by_day.sort_index()
matplotlib.rcParams.update({'fontsize':22})
Breaking_Bad_by_day.plot(kind='bar', figsize=(20, 10), title="Breaking Bad by weekday")

#The same can be applied to visualise hour-by data

Breaking_Bad['hour']=pd.Categorical(Breaking_Bad['hour'], categories=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23], ordered=True)
Breaking_Bad_by_hour=Breaking_Bad['hour'].value_counts()
Breaking_Bad_by_hour=Breaking_Bad_by_hour.sort_index()
matplotlib.rcParams.update({'fontsize':22})
Breaking_Bad_by_hour.plot(kind='bar', figsize=(20, 10), title="Breaking Bad by hour")
